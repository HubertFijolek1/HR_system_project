from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from .models import Candidate

class CandidateTests(APITestCase):
    def setUp(self):
        self.candidate_data = {
            "first_name": "John",
            "last_name": "Doe",
            "email": "john.doe@example.com"
        }
        # 'candidate-list' is auto-generated by the DefaultRouter for our ModelViewSet.
        self.list_url = reverse('candidate-list')
    
    def test_create_candidate(self):
        response = self.client.post(self.list_url, self.candidate_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Candidate.objects.count(), 1)
    
    def test_get_candidates(self):
        Candidate.objects.create(**self.candidate_data)
        response = self.client.get(self.list_url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
    def test_filter_candidates_by_last_name(self):
        # Create multiple candidates
        Candidate.objects.create(first_name="Alice", last_name="Smith", email="alice.smith@example.com")
        Candidate.objects.create(first_name="Bob", last_name="Jones", email="bob.jones@example.com")
        Candidate.objects.create(first_name="Charlie", last_name="Smith", email="charlie.smith@example.com")
        
        # Filter candidates with last_name 'Smith'
        response = self.client.get(self.list_url + "?last_name=Smith", format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)
